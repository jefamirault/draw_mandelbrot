<!DOCTYPE html>
<html>

<head>
    <title>Draw Mandelbrot</title>
    <meta charset="utf-8">
    <meta name="viewport"
          content="width=device-width, initial-scale=1">
  <link rel="stylesheet" href="styles.css">
  <script type="text/javascript" src="scripts.js"></script>

</head>

<body>
    <canvas id="canvas">
    </canvas>
    <% require 'pry-byebug' %>
    <div id="tiles" style="display: none">
        <img id="0" src="..\map\layer_1/tiles/0.png" width="200" height="200">
        <img id="1" src="..\map\layer_1/tiles/1.png" width="200" height="200">
        <img id="2" src="..\map\layer_1/tiles/2.png" width="200" height="200">
        <img id="3" src="..\map\layer_1/tiles/3.png" width="200" height="200">
        <img id="4" src="..\map\layer_1/tiles/4.png" width="200" height="200">
        <img id="5" src="..\map\layer_1/tiles/5.png" width="200" height="200">
        <img id="6" src="..\map\layer_1/tiles/6.png" width="200" height="200">
        <img id="7" src="..\map\layer_1/tiles/7.png" width="200" height="200">
        <img id="8" src="..\map\layer_1/tiles/8.png" width="200" height="200">
        <img id="9" src="..\map\layer_1/tiles/9.png" width="200" height="200">
        <img id="10" src="..\map\layer_1/tiles/10.png" width="200" height="200">
        <img id="11" src="map\layer_1/tiles/11.png" width="200" height="200">
        <img id="12" src="..\map\layer_1/tiles/12.png" width="200" height="200">
        <img id="13" src="..\map\layer_1/tiles/13.png" width="200" height="200">
        <img id="14" src="..\map\layer_1/tiles/14.png" width="200" height="200">
        <img id="15" src="..\map\layer_1/tiles/15.png" width="200" height="200">
        <img id="16" src="..\map\layer_1/tiles/16.png" width="200" height="200">
        <img id="17" src="..\map\layer_1/tiles/17.png" width="200" height="200">
        <img id="18" src="..\map\layer_1/tiles/18.png" width="200" height="200">
        <img id="19" src="..\map\layer_1/tiles/19.png" width="200" height="200">
        <img id="20" src="..\map\layer_1/tiles/20.png" width="200" height="200">
        <img id="21" src="..\map\layer_1/tiles/21.png" width="200" height="200">
        <img id="22" src="..\map\layer_1/tiles/22.png" width="200" height="200">
        <img id="23" src="..\map\layer_1/tiles/23.png" width="200" height="200">
        <img id="24" src="..\map\layer_1/tiles/24.png" width="200" height="200">

        <img id="layer_2" src="..\map\layer_2/tiles/13.png" width="200" height="200">

        <img id="3_0" src="..\map\layer_3/0.png" width="200" height="200">
        <img id="3_1" src="..\map\layer_3/1.png" width="200" height="200">
    </div>

    <div id="displayCoord">Complex Coord: (<span id="coordX">0</span>,<span id="coordY">0</span>)</div>
    <div id="displayMouse">Screen Coord: (<span id="mouseX">0</span>,<span id="mouseY">0</span>)</div>
    <div id="displayPan">Pan: (<span id="panX">0</span>,<span id="panY">0</span>)</div>
    <div id="displayZoom">Zoom: <span id="zoomFactor">1.000</span></div>
    <div id="displayLayer">Layer: <span id="currentLayer">1</span></div>
    <div id="controls">
        <button onclick="zoomReset()">Reset</button>
        <button onclick="zoomIn()">Zoom In</button>
        <button onclick="zoomOut()">Zoom Out</button>
<!--        <button onclick="clearCanvas()">Clear</button>-->
<!--        <button onclick="debug()">Debug</button>-->
    </div><div id="moreControls">
        <div>
            <button onclick="panUp()">Pan Up</button>
        </div>
        <div>
            <button onclick="panLeft()">Pan Left</button>
            <button onclick="panRight()">Pan Right</button>
        </div>
        <div>
            <button onclick="panDown()">Pan Down</button>
        </div>
    </div>

<script>
    canvas =  document.getElementById("canvas");
    var ctx = canvas.getContext('2d')
    ctx.canvas.width  = window.innerWidth;
    ctx.canvas.height = window.innerHeight;

    factor = 1.5 // how much to scale between zoom levels
    zoom = 1.0

    // tileWidth = 1 // how much of the complex plane spanned by one tile
    // tiles = [[0, 0, "12"], [0, 1.0, "7"], [1.0, 0, "13"], [0, -1.0, "17"], [-1.0, 0, "11"], [0, 2.0, "14"], [1.0, 1.0, "8"], [2.0, 0], [1.0, -1.0], [0, -2.0], [-1.0, -1.0, "16"], [-1.0, 1.0, "6"], [-2.0, 0, "10"]]
    tiles = [
        [0.0,0.0, '12'],
        [0.0,1.0,'7'], [1.0,0.0,'13'], [0.0,-1.0,'17'], [-1.0,0.0,'11'],
        [0.0,2.0,'14'], [1.0,1.0,'8'], [2.0,0.0], [1.0,-1.0], [0.0,-2.0], [-1.0,-1.0,'16'], [-2.0,0.0,'10'], [-1.0,1.0,'6'],
        [0.0,3.0], [1.0,2.0], [2.0,1.0], [3.0,0.0], [2.0,-1.0], [1.0,-2.0], [0.0,-3.0], [-1.0,-2.0], [-2.0,-1.0], [-3.0,0.0], [-2.0,1.0], [-1.0,2.0]
    ]
    layer_2 = [[0.25, 0.25, "layer_2", 2]]
    layer_3 = [[-0.625, 0.625, "3_0", 3], [-0.375, 0.625, "3_1", 3]]
    // Camera Offset
    // todo this should change when the user pans left/right/up/down
    offsetX = canvas.width / 2
    offsetY = canvas.height / 2


    panY = 0
    panX = 0

    // Something about scale
    baseScale = 200.0

    baseTileSize = 200


    function layerAtZoom(z) {
        // log (base-2) of zoom
        return Math.floor(Math.log(z) / Math.log(2)) + 1;
    }
    function currentLayer() {
        return layerAtZoom(zoom);
    }

    function tileSizeAtLayer(layer) {
        return baseTileSize * Math.pow(0.5, layer - 1)
    }

    function coordAtMouse(mouseX, mouseY) {
        scale = baseScale * zoom
        // console.log("Complex Pixel: (" + (mouseX - offsetX) + ", " + (mouseY - offsetY) + ")");
        x = (mouseX - offsetX - zoom * panX) / scale
        y = (mouseY - offsetY - zoom * panY) * -1 / scale
        return [x, y]
    }


    function draw() {
        clearCanvas()

        width = window.innerWidth;
        height = window.innerHeight;

    //    call drawTile() on each elem of tiles
        for (i=0;i<tiles.length;i++) {
            if (tiles[i][2])
                paintTile(tiles[i]);
            drawTile(tiles[i]);
        }
        for (i=0;i<layer_2.length;i++) {
            if (layer_2[i][2])
                paintTile(layer_2[i]);
            drawTile(layer_2[i]);
        }
        for (i=0;i<layer_3.length;i++) {
            if (layer_3[i][2])
                paintTile(layer_3[i]);
            drawTile(layer_3[i]);
        }
    }

    function drawTile(tile) {
        src = tile[2];
        xPos = tile[0];
        yPos = tile[1];
        layer = tile[3] ? tile[3] : 1
        tileSize = tileSizeAtLayer(layer)

        ctx.strokeStyle = "#444"
        ctx.beginPath();
        ctx.lineWidth = 0.25;
        x = (width / 2 - tileSize / 2) + xPos * baseScale
        y = (height / 2 - tileSize / 2) - yPos * baseScale
        ctx.rect(x, y, tileSize, tileSize);
        ctx.stroke();
    }
    function paintTile(tile) {
        src = tile[2];
        xPos = tile[0];
        yPos = tile[1];
        layer = tile[3] ? tile[3] : 1
        tileSize = tileSizeAtLayer(layer)

        x = (width / 2 - tileSize / 2) + xPos * baseScale
        y = (height / 2 - tileSize / 2) - yPos * baseScale

        var img = document.getElementById(tile[2]);
        ctx.drawImage(img, x, y, tileSize, tileSize)
    }

    function printZoom() {
        document.getElementById('zoomFactor').textContent = zoom.toFixed(3);
        document.getElementById('currentLayer').textContent = currentLayer();
    }

    function zoomIn() {
        max = 64.0
        // prevent zooming in too much
        if (zoom >= max)
            return false;
        zoom *= factor;

        printZoom();
        printPan();

        offset = [offsetX - panX, offsetY - panY]
        console.log("Using offset: " + offset);

        x = offset[0]
        y = offset[1]
        ctx.translate(x, y);
        ctx.scale(factor, factor);
        // reverse translate to zoom point
        ctx.translate(-x, -y);
        draw();
    }
    function zoomOut() {
        min = 0.25
        // prevent zooming out too much
        if (zoom <= min)
            return false;
        zoom /= factor;
        // panX /= factor;
        // panY /= factor;
        printZoom();
        printPan();

        offset = [offsetX - panX, offsetY - panY]
        console.log("Using offset: " + offset);

        x = offset[0]
        y = offset[1]
        ctx.translate(x, y);
        ctx.scale(1 / factor, 1 / factor);
        ctx.translate(-x, -y);
        draw();
    }
    function zoomReset() {
        ctx.setTransform(1, 0, 0, 1, 0, 0);
        ctx.clearRect(0, 0, canvas.width, canvas.height);
        panX = 0
        panY = 0
        printPan();
        zoom = 1.0
        printZoom();
        draw();
    }

    // Zoom In on Mouse Position
    function zoomInMouse() {
        max = 64.0
        // prevent zooming in too much
        if (zoom >= max)
            return false;
        zoom *= factor;

        printZoom();


        mouseX = parseInt(document.getElementById("mouseX").innerText)
        mouseY = parseInt(document.getElementById("mouseY").innerText)

        currentPan = [panX, panY]

        // distance from center of canvas to mouse
        deltaX = offsetX - mouseX
        deltaY = offsetY - mouseY
        deltaPanX = deltaX / zoom
        deltaPanY = deltaY / zoom

        // calculate as if panning to mouse position
        mousePanX = panX - deltaPanX
        mousePanY = panY - deltaPanY

        // instead pan 1/3 towards mouse pan position (half the inverse of the zoom factor (1.5))
        // wtf this is wrong

        newPanX = (1.0 * panX + mousePanX) / 2.0
        newPanY = (1.0 * panY + mousePanY) / 2.0

        xChange = panX - newPanX
        yChange = panY - newPanY
        ctx.translate(xChange, yChange)

        panX += xChange
        panY += yChange

        zoomIn()
        // console.log(mouseX + "," + mouseY)
        // offset = [mouseX - panX, mouseY - panY]
        // // offset = [mouseX, mouseY]
        // console.log("Using offset: " + offset);
        //
        // x = offset[0]
        // y = offset[1]
        // ctx.translate(x, y);
        // ctx.scale(factor, factor);
        // ctx.translate(-x, -y);


        // debugger;
        // panX = panX + deltaPanX
        // panY = panY + deltaPanY
        // printPan();
        //
        // draw();
    }

    function resetCanvas() {
        ctx.setTransform(1, 0, 0, 1, 0, 0);
        ctx.clearRect(0, 0, canvas.width, canvas.height);
        draw();
    }

    function clearCanvas() {
        // Store the current transformation matrix
        ctx.save();
        // Use the identity matrix while clearing the canvas
        ctx.setTransform(1, 0, 0, 1, 0, 0);
        ctx.clearRect(0, 0, canvas.width, canvas.height);
        // Restore the transform
        ctx.restore();
    }

    // Display Mouse (x,y) position and Complex (ax+bi) Coordinates
    canvas.addEventListener('mousemove', e => {
        var e = window.event;

        var posX = e.clientX;
        var posY = e.clientY;

        document.getElementById('mouseX').innerText = posX;
        document.getElementById('mouseY').innerText = posY;

        precision = 4
        coord = coordAtMouse(posX, posY);
        document.getElementById('coordX').innerText = coord[0].toFixed(precision);
        document.getElementById('coordY').innerText = coord[1].toFixed(precision);

    })
    // Trigger zoom with scroll wheel
    canvas.addEventListener('wheel', e => {
        var e = window.event;

        if (event.deltaY < 0)
            zoomIn();
            // zoomInMouse();
        else
            zoomOut();
    })

    function panInterval() {
      return 100.0 / zoom;
    }

    function pan(deltaX, deltaY) {
        panX += deltaX;
        panY += deltaY;
        ctx.translate(deltaX, deltaY);
        printPan();
        draw();
    }
    function panUp() {
        pan(0, panInterval());
    }
    function panRight() {
        pan(-panInterval(), 0);
    }
    function panDown() {
        pan(0, -panInterval());
    }
    function panLeft() {
        pan(panInterval(), 0);
    }

    function printPan() {
        document.getElementById('panX').innerText = panX.toFixed(0);
        document.getElementById('panY').innerText = -panY.toFixed(0);
    }
    // Pan with keyboard
    window.addEventListener('keydown', e => {
        var e = window.event;
        switch (e.code) {
            case "KeyW":
            case "ArrowUp":
                panUp();
                break;
            case "KeyA":
            case "ArrowLeft":
                panLeft();
                break;
            case "KeyS":
            case "ArrowDown":
                panDown();
                break;
            case "KeyD":
            case "ArrowRight":
                panRight();
                break;
        }
    })

    draw();
    window.setTimeout(function(){
        draw();
    }, 25);

</script>
</body>

</html>
