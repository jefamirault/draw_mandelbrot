<!DOCTYPE html>
<html>

<head>
    <title>Draw Mandelbrot</title>
    <meta charset="utf-8">
    <meta name="viewport"
          content="width=device-width, initial-scale=1">
  <link rel="stylesheet" href="styles.css">
  <script type="text/javascript" src="scripts.js"></script>

</head>

<body>
    <canvas id="canvas">
    </canvas>
    <% require 'pry-byebug' %>
    <div id="tiles" style="display: none">

    </div>

    <div id="displayCoord">Complex Coord: (<span id="coordX">0</span>,<span id="coordY">0</span>)</div>
    <div id="displayMouse">Screen Coord: (<span id="mouseX">0</span>,<span id="mouseY">0</span>)</div>
    <div id="displayPan">Pan: (<span id="panX">0</span>,<span id="panY">0</span>)</div>
    <div id="displayZoom">Zoom: <span id="zoomFactor">1.000</span></div>
    <div id="displayLayer">Layer: <span id="currentLayer">1</span></div>
    <div id="controls">
        <button onclick="zoomReset()">Reset</button>
        <button onclick="zoomIn()">Zoom In</button>
        <button onclick="zoomOut()">Zoom Out</button>
<!--        <button onclick="clearCanvas()">Clear</button>-->
    </div>
    <div id="debugControls">
        <button onclick="requestTiles2()">2</button>
        <button onclick="requestTiles3()">3</button>
        <button onclick="requestTiles4()">4</button>
        <button onclick="requestTiles5()">5</button>
        <button onclick="requestTiles6()">6</button>
        <button onclick="requestTiles7()">7</button>
        <button onclick="requestTiles8()">8</button>
        <button onclick="requestTiles9()">9</button>
        <button onclick="requestTiles10()">10</button>
        <button onclick="requestTiles11()">11</button>
        <button onclick="requestTiles12()">12</button>
        <button onclick="requestTiles13()">13</button>
        <button onclick="requestTiles14()">14</button>
        <button onclick="requestTiles15()">15</button>
        <button onclick="requestTiles16()">16</button>
    </div>
    <div id="moreControls">
        <div>
            <button onclick="panUp()">Pan Up</button>
        </div>
        <div>
            <button onclick="panLeft()">Pan Left</button>
            <button onclick="panRight()">Pan Right</button>
        </div>
        <div>
            <button onclick="panDown()">Pan Down</button>
        </div>
    </div>

<script>
    canvas =  document.getElementById("canvas");
    var ctx = canvas.getContext('2d')
    ctx.canvas.width  = window.innerWidth;
    ctx.canvas.height = window.innerHeight;


    width = window.innerWidth;
    height = window.innerHeight;

    factor = 1.5 // how much to scale between zoom levels
    zoom = 1.0

    tiles = <%= tiles.map {|t| [*t.coord, t.id.to_s, t.layer, t.render_path]}.to_json %>

    // Camera Offset
    // todo this should change when the user pans left/right/up/down
    offsetX = canvas.width / 2
    offsetY = canvas.height / 2


    panY = 0
    panX = 0

    // Something about scale
    baseScale = 200.0

    baseTileSize = 200


    function coordAtMouse(mouseX, mouseY) {
        scale = baseScale * zoom
        // console.log("Complex Pixel: (" + (mouseX - offsetX) + ", " + (mouseY - offsetY) + ")");
        x = (mouseX - offsetX - zoom * panX) / scale
        y = (mouseY - offsetY - zoom * panY) * -1 / scale
        return [x, y]
    }

    // should use current_layer to emphasize closest tiles

    function drawTile(tile) {
        xPos = tile[0];
        yPos = tile[1];
        layer = tile[3] ? tile[3] : 1
        tileSize = tileSizeAtLayer(layer)

        ctx.strokeStyle = "#444"
        ctx.beginPath();
        ctx.lineWidth = 0.5 ** (layer + 1);
        // ctx.lineWidth = 0.00005;
        x = (width / 2 - tileSize / 2) + xPos * baseScale
        y = (height / 2 - tileSize / 2) - yPos * baseScale
        ctx.rect(x, y, tileSize, tileSize);
        ctx.stroke();
    }
    function paintTile(tile) {
        src = tile[2];
        xPos = tile[0];
        yPos = tile[1];
        layer = tile[3] ? tile[3] : 1
        tileSize = tileSizeAtLayer(layer)

        x = (width / 2 - tileSize / 2) + xPos * baseScale
        y = (height / 2 - tileSize / 2) - yPos * baseScale

        if (src == null) {
            // shade tile to indicate not rendered at given layer
            ctx.fillStyle = "#777"
            ctx.beginPath();
            ctx.lineWidth = 0.5 ** (layer + 1);
            ctx.globalAlpha = 0.3
            ctx.fillRect(x, y, tileSize, tileSize);
            ctx.globalAlpha = 1.0
            return false;
        }

        var img = document.getElementById(tile[2]);
        ctx.drawImage(img, x, y, tileSize, tileSize)

        if (layer < currentLayer()) {
            //    shade more the further back the tile is
            diff = currentLayer() - layer
            opacity = Math.min(0.125 * diff, 0.95)
            ctx.fillStyle = "#777"
            ctx.beginPath();
            ctx.lineWidth = 0.5 ** (layer + 1);
            ctx.globalAlpha = opacity
            ctx.fillRect(x, y, tileSize, tileSize);
            ctx.globalAlpha = 1.0
        }

    }

    function printZoom() {
        document.getElementById('zoomFactor').textContent = zoom.toFixed(3);
        document.getElementById('currentLayer').textContent = currentLayer();
    }

    function zoomIn() {
        max = 2 ** 15
        // prevent zooming in too much
        if (zoom >= max)
            return false;
        zoom *= factor;

        printZoom();
        printPan();

        offset = [offsetX - panX, offsetY - panY]
        console.log("Using offset: " + offset);

        x = offset[0]
        y = offset[1]
        ctx.translate(x, y);
        ctx.scale(factor, factor);
        // reverse translate to zoom point
        ctx.translate(-x, -y);
        draw(tiles);
    }
    function zoomOut() {
        min = 0.5
        // prevent zooming out too much
        if (zoom <= min)
            return false;
        zoom /= factor;
        // panX /= factor;
        // panY /= factor;
        printZoom();
        printPan();

        offset = [offsetX - panX, offsetY - panY]
        console.log("Using offset: " + offset);

        x = offset[0]
        y = offset[1]
        ctx.translate(x, y);
        ctx.scale(1 / factor, 1 / factor);
        ctx.translate(-x, -y);
        draw(tiles);
    }
    function zoomReset() {
        ctx.setTransform(1, 0, 0, 1, 0, 0);
        ctx.clearRect(0, 0, canvas.width, canvas.height);
        panX = 0
        panY = 0
        printPan();
        zoom = 1.0
        printZoom();
        draw(tiles);
    }

    // Zoom In on Mouse Position
    function zoomInMouse() {
        max = 64.0
        // prevent zooming in too much
        if (zoom >= max)
            return false;
        zoom *= factor;

        printZoom();


        mouseX = parseInt(document.getElementById("mouseX").innerText)
        mouseY = parseInt(document.getElementById("mouseY").innerText)

        currentPan = [panX, panY]

        // distance from center of canvas to mouse
        deltaX = offsetX - mouseX
        deltaY = offsetY - mouseY
        deltaPanX = deltaX / zoom
        deltaPanY = deltaY / zoom

        // calculate as if panning to mouse position
        mousePanX = panX - deltaPanX
        mousePanY = panY - deltaPanY

        // instead pan 1/3 towards mouse pan position (half the inverse of the zoom factor (1.5))
        // wtf this is wrong

        newPanX = (1.0 * panX + mousePanX) / 2.0
        newPanY = (1.0 * panY + mousePanY) / 2.0

        xChange = panX - newPanX
        yChange = panY - newPanY
        ctx.translate(xChange, yChange)

        panX += xChange
        panY += yChange

        zoomIn()
        // console.log(mouseX + "," + mouseY)
        // offset = [mouseX - panX, mouseY - panY]
        // // offset = [mouseX, mouseY]
        // console.log("Using offset: " + offset);
        //
        // x = offset[0]
        // y = offset[1]
        // ctx.translate(x, y);
        // ctx.scale(factor, factor);
        // ctx.translate(-x, -y);


        // debugger;
        // panX = panX + deltaPanX
        // panY = panY + deltaPanY
        // printPan();
        //
        // draw();
    }

    function resetCanvas() {
        ctx.setTransform(1, 0, 0, 1, 0, 0);
        ctx.clearRect(0, 0, canvas.width, canvas.height);
        draw();
    }

    function clearCanvas() {
        // Store the current transformation matrix
        ctx.save();
        // Use the identity matrix while clearing the canvas
        ctx.setTransform(1, 0, 0, 1, 0, 0);
        ctx.clearRect(0, 0, canvas.width, canvas.height);
        // Restore the transform
        ctx.restore();
    }


    // function updateMap() {
        // request new tiles, merge with existing tile set, register (new) tiles, redraw
        // requestTiles
    // }


    function pan(deltaX, deltaY) {
        panX += deltaX;
        panY += deltaY;
        ctx.translate(deltaX, deltaY);
        printPan();
        draw(tiles);
    }
    function panUp() {
        pan(0, panInterval());
    }
    function panRight() {
        pan(-panInterval(), 0);
    }
    function panDown() {
        pan(0, -panInterval());
    }
    function panLeft() {
        pan(panInterval(), 0);
    }

    function draw(tiles) {
        clearCanvas();

        width = window.innerWidth;
        height = window.innerHeight;

        //    call drawTile() on each elem of tiles
        for (i=0;i<tiles.length;i++) {
            if (tiles[i][2])
                paintTile(tiles[i]);
            drawTile(tiles[i]);
        }
    }

    function requestTiles2() {
        var xmlhttp = new XMLHttpRequest();
        var newTiles;
        xmlhttp.onreadystatechange = function() {
            if (xmlhttp.readyState == XMLHttpRequest.DONE) {   // XMLHttpRequest.DONE == 4
                if (xmlhttp.status == 200) {
                    newTiles = JSON.parse(xmlhttp.responseText)
                    // return newTiles;
                    registerTiles(newTiles);
                    tiles = tiles.concat(newTiles)
                    // draw(newTiles)
                    // debugger;
                    // document.getElementById("myDiv").innerHTML = xmlhttp.responseText;
                }
                else if (xmlhttp.status == 400) {
                    alert('There was an error 400');
                }
                else {
                    alert('something else other than 200 was returned');
                }
            }
        };
        // TODO add focus and layer to url parameters GET "/tiles?focus=[0.0,0.0]&layer=1"
        xmlhttp.open("GET", "tiles?focus=[-0.25,0.25]&layer=2", true);
        // xmlhttp.open("GET", "tiles?focus=[0.0,0.0]&layer=1", true);
        xmlhttp.send();
    }
    function requestTiles3() {
        var xmlhttp = new XMLHttpRequest();
        var newTiles;
        xmlhttp.onreadystatechange = function() {
            if (xmlhttp.readyState == XMLHttpRequest.DONE) {   // XMLHttpRequest.DONE == 4
                if (xmlhttp.status == 200) {
                    newTiles = JSON.parse(xmlhttp.responseText)
                    // return newTiles;
                    registerTiles(newTiles);
                    tiles = tiles.concat(newTiles)
                    // draw(newTiles)
                    // debugger;
                    // document.getElementById("myDiv").innerHTML = xmlhttp.responseText;
                }
                else if (xmlhttp.status == 400) {
                    alert('There was an error 400');
                }
                else {
                    alert('something else other than 200 was returned');
                }
            }
        };
        // TODO add focus and layer to url parameters GET "/tiles?focus=[0.0,0.0]&layer=1"
        xmlhttp.open("GET", "tiles?focus=[-1.375,0.125]&layer=3", true);
        // xmlhttp.open("GET", "tiles?focus=[0.0,0.0]&layer=1", true);
        xmlhttp.send();
    }
    function requestTiles4() {
        var xmlhttp = new XMLHttpRequest();
        var newTiles;
        xmlhttp.onreadystatechange = function() {
            if (xmlhttp.readyState == XMLHttpRequest.DONE) {   // XMLHttpRequest.DONE == 4
                if (xmlhttp.status == 200) {
                    newTiles = JSON.parse(xmlhttp.responseText)
                    // return newTiles;
                    registerTiles(newTiles);
                    tiles = tiles.concat(newTiles)
                    // draw(newTiles)
                    // debugger;
                    // document.getElementById("myDiv").innerHTML = xmlhttp.responseText;
                }
                else if (xmlhttp.status == 400) {
                    alert('There was an error 400');
                }
                else {
                    alert('something else other than 200 was returned');
                }
            }
        };
        // TODO add focus and layer to url parameters GET "/tiles?focus=[0.0,0.0]&layer=1"
        xmlhttp.open("GET", "/tiles?focus=[-1.6875,%200.1875]&layer=4", true);
        // xmlhttp.open("GET", "tiles?focus=[0.0,0.0]&layer=1", true);
        xmlhttp.send();
    }
    function requestTiles5() {
        var xmlhttp = new XMLHttpRequest();
        var newTiles;
        xmlhttp.onreadystatechange = function() {
            if (xmlhttp.readyState == XMLHttpRequest.DONE) {   // XMLHttpRequest.DONE == 4
                if (xmlhttp.status == 200) {
                    newTiles = JSON.parse(xmlhttp.responseText)
                    // return newTiles;
                    registerTiles(newTiles);
                    tiles = tiles.concat(newTiles)
                    // draw(newTiles)
                    // debugger;
                    // document.getElementById("myDiv").innerHTML = xmlhttp.responseText;
                }
                else if (xmlhttp.status == 400) {
                    alert('There was an error 400');
                }
                else {
                    alert('something else other than 200 was returned');
                }
            }
        };
        // TODO add focus and layer to url parameters GET "/tiles?focus=[0.0,0.0]&layer=1"
        xmlhttp.open("GET", "/tiles?focus=[-1.40625, 0.03125]&layer=5", true);
        // xmlhttp.open("GET", "tiles?focus=[0.0,0.0]&layer=1", true);
        xmlhttp.send();
    }
    function requestTiles6() {
        var xmlhttp = new XMLHttpRequest();
        var newTiles;
        xmlhttp.onreadystatechange = function() {
            if (xmlhttp.readyState == XMLHttpRequest.DONE) {   // XMLHttpRequest.DONE == 4
                if (xmlhttp.status == 200) {
                    newTiles = JSON.parse(xmlhttp.responseText)
                    // return newTiles;
                    registerTiles(newTiles);
                    tiles = tiles.concat(newTiles)
                    // draw(newTiles)
                    // debugger;
                    // document.getElementById("myDiv").innerHTML = xmlhttp.responseText;
                }
                else if (xmlhttp.status == 400) {
                    alert('There was an error 400');
                }
                else {
                    alert('something else other than 200 was returned');
                }
            }
        };
        // TODO add focus and layer to url parameters GET "/tiles?focus=[0.0,0.0]&layer=1"
        xmlhttp.open("GET", "/tiles?focus=[-1.3916, 0.0182]&layer=6", true);
        // xmlhttp.open("GET", "tiles?focus=[0.0,0.0]&layer=1", true);
        xmlhttp.send();
    }
    function requestTiles7() {
        var xmlhttp = new XMLHttpRequest();
        var newTiles;
        xmlhttp.onreadystatechange = function() {
            if (xmlhttp.readyState == XMLHttpRequest.DONE) {   // XMLHttpRequest.DONE == 4
                if (xmlhttp.status == 200) {
                    newTiles = JSON.parse(xmlhttp.responseText)
                    // return newTiles;
                    registerTiles(newTiles);
                    tiles = tiles.concat(newTiles)
                    // draw(newTiles)
                    // debugger;
                    // document.getElementById("myDiv").innerHTML = xmlhttp.responseText;
                }
                else if (xmlhttp.status == 400) {
                    alert('There was an error 400');
                }
                else {
                    alert('something else other than 200 was returned');
                }
            }
        };
        // TODO add focus and layer to url parameters GET "/tiles?focus=[0.0,0.0]&layer=1"
        xmlhttp.open("GET", "/tiles?focus=[-1.3833, 0.0232]&layer=7", true);
        // xmlhttp.open("GET", "tiles?focus=[0.0,0.0]&layer=1", true);
        xmlhttp.send();
    }
    function requestTiles8() {
        var xmlhttp = new XMLHttpRequest();
        var newTiles;
        xmlhttp.onreadystatechange = function() {
            if (xmlhttp.readyState == XMLHttpRequest.DONE) {   // XMLHttpRequest.DONE == 4
                if (xmlhttp.status == 200) {
                    newTiles = JSON.parse(xmlhttp.responseText)
                    // return newTiles;
                    registerTiles(newTiles);
                    tiles = tiles.concat(newTiles)
                    // draw(newTiles)
                    // debugger;
                    // document.getElementById("myDiv").innerHTML = xmlhttp.responseText;
                }
                else if (xmlhttp.status == 400) {
                    alert('There was an error 400');
                }
                else {
                    alert('something else other than 200 was returned');
                }
            }
        };
        // TODO add focus and layer to url parameters GET "/tiles?focus=[0.0,0.0]&layer=1"
        xmlhttp.open("GET", "/tiles?focus=[-1.37927, 0.02663]&layer=8", true);
        // xmlhttp.open("GET", "tiles?focus=[0.0,0.0]&layer=1", true);
        xmlhttp.send();
    }
    function requestTiles9() {
        var xmlhttp = new XMLHttpRequest();
        var newTiles;
        xmlhttp.onreadystatechange = function() {
            if (xmlhttp.readyState == XMLHttpRequest.DONE) {   // XMLHttpRequest.DONE == 4
                if (xmlhttp.status == 200) {
                    newTiles = JSON.parse(xmlhttp.responseText)
                    // return newTiles;
                    registerTiles(newTiles);
                    tiles = tiles.concat(newTiles)
                    // draw(newTiles)
                    // debugger;
                    // document.getElementById("myDiv").innerHTML = xmlhttp.responseText;
                }
                else if (xmlhttp.status == 400) {
                    alert('There was an error 400');
                }
                else {
                    alert('something else other than 200 was returned');
                }
            }
        };
        // TODO add focus and layer to url parameters GET "/tiles?focus=[0.0,0.0]&layer=1"
        xmlhttp.open("GET", "/tiles?focus=[-1.39615, 0.01749]&layer=9", true);
        // xmlhttp.open("GET", "tiles?focus=[0.0,0.0]&layer=1", true);
        xmlhttp.send();
    }
    function requestTiles10() {
        var xmlhttp = new XMLHttpRequest();
        var newTiles;
        xmlhttp.onreadystatechange = function() {
            if (xmlhttp.readyState == XMLHttpRequest.DONE) {   // XMLHttpRequest.DONE == 4
                if (xmlhttp.status == 200) {
                    newTiles = JSON.parse(xmlhttp.responseText)
                    // return newTiles;
                    registerTiles(newTiles);
                    tiles = tiles.concat(newTiles)
                    // draw(newTiles)
                    // debugger;
                    // document.getElementById("myDiv").innerHTML = xmlhttp.responseText;
                }
                else if (xmlhttp.status == 400) {
                    alert('There was an error 400');
                }
                else {
                    alert('something else other than 200 was returned');
                }
            }
        };
        // TODO add focus and layer to url parameters GET "/tiles?focus=[0.0,0.0]&layer=1"
        xmlhttp.open("GET", "/tiles?focus=[-1.39553, 0.01861]&layer=10", true);
        // xmlhttp.open("GET", "tiles?focus=[0.0,0.0]&layer=1", true);
        xmlhttp.send();
    }
    function requestTiles11() {
        var xmlhttp = new XMLHttpRequest();
        var newTiles;
        xmlhttp.onreadystatechange = function() {
            if (xmlhttp.readyState == XMLHttpRequest.DONE) {   // XMLHttpRequest.DONE == 4
                if (xmlhttp.status == 200) {
                    newTiles = JSON.parse(xmlhttp.responseText)
                    // return newTiles;
                    registerTiles(newTiles);
                    tiles = tiles.concat(newTiles)
                    // draw(newTiles)
                    // debugger;
                    // document.getElementById("myDiv").innerHTML = xmlhttp.responseText;
                }
                else if (xmlhttp.status == 400) {
                    alert('There was an error 400');
                }
                else {
                    alert('something else other than 200 was returned');
                }
            }
        };
        // TODO add focus and layer to url parameters GET "/tiles?focus=[0.0,0.0]&layer=1"
        xmlhttp.open("GET", "/tiles?focus=[-1.39495, 0.01808]&layer=11", true);
        // xmlhttp.open("GET", "tiles?focus=[0.0,0.0]&layer=1", true);
        xmlhttp.send();
    }
    function requestTiles12() {
        var xmlhttp = new XMLHttpRequest();
        var newTiles;
        xmlhttp.onreadystatechange = function() {
            if (xmlhttp.readyState == XMLHttpRequest.DONE) {   // XMLHttpRequest.DONE == 4
                if (xmlhttp.status == 200) {
                    newTiles = JSON.parse(xmlhttp.responseText)
                    // return newTiles;
                    registerTiles(newTiles);
                    tiles = tiles.concat(newTiles)
                    // draw(newTiles)
                    // debugger;
                    // document.getElementById("myDiv").innerHTML = xmlhttp.responseText;
                }
                else if (xmlhttp.status == 400) {
                    alert('There was an error 400');
                }
                else {
                    alert('something else other than 200 was returned');
                }
            }
        };
        // TODO add focus and layer to url parameters GET "/tiles?focus=[0.0,0.0]&layer=1"
        xmlhttp.open("GET", "/tiles?focus=[-1.39528, 0.01833]&layer=12", true);
        // xmlhttp.open("GET", "tiles?focus=[0.0,0.0]&layer=1", true);
        xmlhttp.send();
    }
    function requestTiles13() {
        var xmlhttp = new XMLHttpRequest();
        var newTiles;
        xmlhttp.onreadystatechange = function() {
            if (xmlhttp.readyState == XMLHttpRequest.DONE) {   // XMLHttpRequest.DONE == 4
                if (xmlhttp.status == 200) {
                    newTiles = JSON.parse(xmlhttp.responseText)
                    // return newTiles;
                    registerTiles(newTiles);
                    tiles = tiles.concat(newTiles)
                    // draw(newTiles)
                    // debugger;
                    // document.getElementById("myDiv").innerHTML = xmlhttp.responseText;
                }
                else if (xmlhttp.status == 400) {
                    alert('There was an error 400');
                }
                else {
                    alert('something else other than 200 was returned');
                }
            }
        };
        // TODO add focus and layer to url parameters GET "/tiles?focus=[0.0,0.0]&layer=1"
        xmlhttp.open("GET", "/tiles?focus=[-1.39514, 0.01843]&layer=13", true);
        // xmlhttp.open("GET", "tiles?focus=[0.0,0.0]&layer=1", true);
        xmlhttp.send();
    }
    function requestTiles14() {
        var xmlhttp = new XMLHttpRequest();
        var newTiles;
        xmlhttp.onreadystatechange = function() {
            if (xmlhttp.readyState == XMLHttpRequest.DONE) {   // XMLHttpRequest.DONE == 4
                if (xmlhttp.status == 200) {
                    newTiles = JSON.parse(xmlhttp.responseText)
                    // return newTiles;
                    registerTiles(newTiles);
                    tiles = tiles.concat(newTiles)
                    // draw(newTiles)
                    // debugger;
                    // document.getElementById("myDiv").innerHTML = xmlhttp.responseText;
                }
                else if (xmlhttp.status == 400) {
                    alert('There was an error 400');
                }
                else {
                    alert('something else other than 200 was returned');
                }
            }
        };
        // TODO add focus and layer to url parameters GET "/tiles?focus=[0.0,0.0]&layer=1"
        xmlhttp.open("GET", "/tiles?focus=[-1.39520, 0.01848]&layer=14", true);
        // xmlhttp.open("GET", "tiles?focus=[0.0,0.0]&layer=1", true);
        xmlhttp.send();
    }
    function requestTiles15() {
        var xmlhttp = new XMLHttpRequest();
        var newTiles;
        xmlhttp.onreadystatechange = function() {
            if (xmlhttp.readyState == XMLHttpRequest.DONE) {   // XMLHttpRequest.DONE == 4
                if (xmlhttp.status == 200) {
                    newTiles = JSON.parse(xmlhttp.responseText)
                    // return newTiles;
                    registerTiles(newTiles);
                    tiles = tiles.concat(newTiles)
                    // draw(newTiles)
                    // debugger;
                    // document.getElementById("myDiv").innerHTML = xmlhttp.responseText;
                }
                else if (xmlhttp.status == 400) {
                    alert('There was an error 400');
                }
                else {
                    alert('something else other than 200 was returned');
                }
            }
        };
        // TODO add focus and layer to url parameters GET "/tiles?focus=[0.0,0.0]&layer=1"
        xmlhttp.open("GET", "/tiles?focus=[-1.39523, 0.01852]&layer=15", true);
        // xmlhttp.open("GET", "tiles?focus=[0.0,0.0]&layer=1", true);
        xmlhttp.send();
    }
    function requestTiles16() {
        var xmlhttp = new XMLHttpRequest();
        var newTiles;
        xmlhttp.onreadystatechange = function() {
            if (xmlhttp.readyState == XMLHttpRequest.DONE) {   // XMLHttpRequest.DONE == 4
                if (xmlhttp.status == 200) {
                    newTiles = JSON.parse(xmlhttp.responseText)
                    // return newTiles;
                    registerTiles(newTiles);
                    tiles = tiles.concat(newTiles)
                    // draw(newTiles)
                    // debugger;
                    // document.getElementById("myDiv").innerHTML = xmlhttp.responseText;
                }
                else if (xmlhttp.status == 400) {
                    alert('There was an error 400');
                }
                else {
                    alert('something else other than 200 was returned');
                }
            }
        };
        // TODO add focus and layer to url parameters GET "/tiles?focus=[0.0,0.0]&layer=1"
        xmlhttp.open("GET", "/tiles?focus=[-1.39522, 0.01857]&layer=16", true);
        // xmlhttp.open("GET", "tiles?focus=[0.0,0.0]&layer=1", true);
        xmlhttp.send();
    }
    // Display Mouse (x,y) position and Complex (ax+bi) Coordinates
    canvas.addEventListener('mousemove', e => {
        var e = window.event;

        var posX = e.clientX;
        var posY = e.clientY;

        document.getElementById('mouseX').innerText = posX;
        document.getElementById('mouseY').innerText = posY;

        precision = 5
        coord = coordAtMouse(posX, posY);
        document.getElementById('coordX').innerText = coord[0].toFixed(precision);
        document.getElementById('coordY').innerText = coord[1].toFixed(precision);

    });

    window.addEventListener("load", function(){
        registerTiles(tiles);
    });
    window.addEventListener("load", keyboardControls());
    window.addEventListener("load", function(){mouseControls(canvas)});

</script>
</body>

</html>
